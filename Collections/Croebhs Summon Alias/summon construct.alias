<drac2>
TYPE = "Construct"
SPELL_NAME = "Summon Construct"
SPELL_DESC = "You call forth the spirit of a construct. It manifests in an unoccupied space that you can see within range. This corporeal form uses the Construct Spirit stat block. When you cast the spell, choose a material: Clay, Metal, or Stone. The creature resembles a golem or a modron (your choice) made of the chosen material, which determines certain traits in its stat block. The creature disappears when it drops to 0 hit points or when the spell ends.\n\nThe creature is an ally to you and your companions. In combat, the creature shares your initiative count, but it takes its turn immediately after yours. It obeys your verbal commands (no action required by you). If you don't issue any, it takes the Dodge action and uses its move to avoid danger."
MIN_LEVEL = 4

using(init_add="f48672c2-8f25-4170-ba39-d5f6ffd38bd3")

args = argparse(["-type"] + &ARGS&)
c = combat()
ch = character()
sab = ch.spellbook.sab
sdc = ch.spellbook.dc
true, false, null = True, False, None

warlock = ch.levels.get('Warlock')
min_slot = max(MIN_LEVEL, ((warlock >= 9) + (warlock >= 7) + (warlock >= 5) + (warlock >= 3) + 1))

if not (c and c.me):
  return f"""embed -title "Woopsie!" -desc "You're not in initiative!" """

spell_level = args.last('l', min_slot, int)
summon_type = args.last('type', "", str).lower()
ignore  = args.last('i')

stat_block = {
  "hp":           (15 * spell_level) - 20,
  "ac":           13 + spell_level,
  "pb":           proficiencyBonus,
  "strength":     18,
  "dexterity":    10,
  "constitution": 18,
  "intelligence": 14,
  "wisdom":       11,
  "charisma":     5,
  "type":         "construct",
  "resist":       ["poison"]
}

attacks = [{"name":"Slam","automation":[{"type":"target","target":"each","effects":[{"type":"attack","attackBonus":sab,"hit":[{"type":"damage","damage":f"1d8 + 4 + {spell_level} [bludgeoning]"}],"miss":[],"adv":"0"}]},{"type":"text","text":"*Melee Weapon Attack:* your spell attack modifier to hit, reach 5 ft., one target. *Hit:* 1d8 + 4 + the spell's level bludgeoning damage."}],"_v":2}]
extra_effects = []
match summon_type:
  case "clay":
    summon_name = "Clay"
    attacks.extend([{"name":"Berserk Lashing","automation":[{"type":"text","text":"When the construct takes damage, it makes a slam attack against a random creature within 5 feet of it. If no creature is within reach, the construct moves up to half its speed toward an enemy it can see, without provoking opportunity attacks."}],"_v":2,"verb":"begins","activation_type":4}])
  case "metal":
    summon_name = "Metal"
    attacks.extend([{"name":"Heated Body","automation":[{"type":"target","target":"each","effects":[{"type":"damage","damage":"1d10 [fire]"}]},{"type":"text","text":"A creature that touches the construct or hits it with a melee attack while within 5 feet of it takes 1d10 fire damage."}],"_v":2,"verb":"has","activation_type":8}])
  case "stone":
    summon_name = "Stone"
    attacks.extend([{"name":"Stone Lethargy","automation":[{"type":"target","target":"each","effects":[{"type":"save","stat":"wis","dc":sdc,"fail":[{"type":"ieffect2","name":"Lethargic","duration":1,"desc":"Can't take opportunity attacks, speed halved"}],"success":[]}]},{"type":"text","text":"When a creature starts its turn within 10 feet of the spirit, the spirit can target it with magical energy if the spirit can see it. Wisdom Saving Throw: DC equals your spell save DC, the target. Failure: Until the start of its next turn, the target canâ€™t make Opportunity Attacks, and its Speed is halved."}],"_v":2,"verb":"uses","proper":true,"activation_type":8}])
  case _:
    return f"""embed -title "Woopsie!" -desc "You didn't select a type!\n\nSelect from Clay, Metal, or Stone." """

if not ignore:
  if not ch.spellbook.get_slots(spell_level):
    return f"""embed -title "Woopsie!" -desc "You don't have any slots left!" -f "Spell Slots|{ch.spellbook.slots_str(spell_level)}" """
  if not ch.spellbook.can_cast(SPELL_NAME, spell_level):
    return f"""embed -title "Woopsie!" -desc "You don't have that spell prepared!" """
  ch.spellbook.use_slot(spell_level)

custom_names = load_yaml(get('summon_names', '{}'))
s_name = args.last('name')
if s_name == 'reset':
  custom_names.pop(summon_name, None)
elif s_name:
  custom_names[summon_name] = s_name
ch.set_cvar('summon_names', dump_yaml(custom_names))
s_name = custom_names.get(summon_name, f"Summoned {summon_name} {TYPE} ({init_add.get_initials(name)})")

group_name = args.last('group', combat().me.group or f"{init_add.get_initials(name)}'s Summons")

stat_block['p'] = True
stat_block['group'] = group_name
stat_block['note'] = f"Summoned by {name}\nMultiattack: {max(1, spell_level//2)}"

c.me.set_group(group_name)
c.me.add_effect(f"Summon {TYPE}", concentration=True, duration=600)

embed_args = {
  "title": f"{name} summoned a {summon_name} {TYPE}!",
  "desc": SPELL_DESC,
  "fields": [{"title": "Spell Slots", "desc": f"{ch.spellbook.slots_str(spell_level)} {'(-1)' if not ignore else ''}"}],
  "footer": f"{ctx.prefix+ctx.alias} | Made by Croebh",
  "color": color,
  "thumb": image
}

summon_command = init_add.build_init_add(s_name, c.me.init, stat_block)
embed = init_add.build_tembed(**embed_args, init_name=s_name, attacks=attacks, effect_name=f"Summon {TYPE}", extra_effects=extra_effects)

return f"""multiline
{summon_command}
{embed}
"""
</drac2>
